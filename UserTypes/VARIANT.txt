// include required types
#include "IUnknown.txt"
#include "IDispatch.txt"

typedef short VARIANT_BOOL;
typedef VARIANT_BOOL _VARIANT_BOOL;
typedef unsigned short VARTYPE;
typedef LONG SCODE;
typedef SCODE *PSCODE;
typedef double DATE;

typedef union tagCY {
    struct {
        long LittleLo_Or_BigHi;
        long LittleHi_Or_BigLo;
    } DUMMYSTRUCTNAME;
    LONGLONG int64;
} CY;
typedef CY CURRENCY;

typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        } DUMMYSTRUCTNAME;
        USHORT signscale;
    } DUMMYUNIONNAME;
    ULONG Hi32;
    union {
        struct {
            ULONG LittleLo_Or_BigMid_32;
            ULONG LittleMid_Or_BigLo_32;
        } DUMMYSTRUCTNAME2;
        ULONGLONG Lo64;
    } DUMMYUNIONNAME2;
} DECIMAL,*LPDECIMAL;

typedef struct tagSAFEARRAYBOUND
{
    ULONG cElements;
    LONG lLbound;
}SAFEARRAYBOUND;

typedef struct tagSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
}SAFEARRAY,*LPSAFEARRAY;


typedef struct tagIRecordInfoVtbl
{       
    // HRESULT ( STDMETHODCALLTYPE *QueryInterface )( IRecordInfo * This,REFIID riid,void **ppvObject);
    PVOID QueryInterface;
    // ULONG ( STDMETHODCALLTYPE *AddRef )( IRecordInfo * This);
    PVOID AddRef;
    // ULONG ( STDMETHODCALLTYPE *Release )( IRecordInfo * This);
    PVOID Release;
    // HRESULT ( STDMETHODCALLTYPE *RecordInit )( IRecordInfo * This,PVOID pvNew);
    PVOID RecordInit;
    // HRESULT ( STDMETHODCALLTYPE *RecordClear )( IRecordInfo * This,PVOID pvExisting);
    PVOID RecordClear;
    // HRESULT ( STDMETHODCALLTYPE *RecordCopy )( IRecordInfo * This,PVOID pvExisting,PVOID pvNew);
    PVOID RecordCopy;
    // HRESULT ( STDMETHODCALLTYPE *GetGuid )( IRecordInfo * This,GUID *pguid);
    PVOID GetGuid;
    // HRESULT ( STDMETHODCALLTYPE *GetName )( IRecordInfo * This,BSTR *pbstrName);
    PVOID GetName;
    // HRESULT ( STDMETHODCALLTYPE *GetSize )( IRecordInfo * This,ULONG *pcbSize);
    PVOID GetSize;
    // HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( IRecordInfo * This,ITypeInfo **ppTypeInfo);
    PVOID GetTypeInfo;
    // HRESULT ( STDMETHODCALLTYPE *GetField )( IRecordInfo * This,PVOID pvData,LPCOLESTR szFieldName,VARIANT *pvarField);
    PVOID GetField;
    // HRESULT ( STDMETHODCALLTYPE *GetFieldNoCopy )( IRecordInfo * This,PVOID pvData,LPCOLESTR szFieldName,VARIANT *pvarField,PVOID *ppvDataCArray);
    PVOID GetFieldNoCopy;
    // HRESULT ( STDMETHODCALLTYPE *PutField )( IRecordInfo * This,ULONG wFlags,PVOID pvData,LPCOLESTR szFieldName,VARIANT *pvarField);
    PVOID PutField;
    // HRESULT ( STDMETHODCALLTYPE *PutFieldNoCopy )( IRecordInfo * This,ULONG wFlags,PVOID pvData,LPCOLESTR szFieldName,VARIANT *pvarField);
    PVOID PutFieldNoCopy;
    // HRESULT ( STDMETHODCALLTYPE *GetFieldNames )(IRecordInfo * This,ULONG *pcNames,BSTR *rgBstrNames);
    PVOID GetFieldNames;
    // BOOL ( STDMETHODCALLTYPE *IsMatchingType )( IRecordInfo * This, IRecordInfo *pRecordInfo);
    PVOID IsMatchingType;
    // PVOID ( STDMETHODCALLTYPE *RecordCreate )( IRecordInfo * This);
    PVOID RecordCreate;
    // HRESULT ( STDMETHODCALLTYPE *RecordCreateCopy )( IRecordInfo * This, PVOID pvSource, PVOID *ppvDest);
    PVOID RecordCreateCopy;
    // HRESULT ( STDMETHODCALLTYPE *RecordDestroy )( IRecordInfo * This,PVOID pvRecord);
    PVOID RecordDestroy;
} IRecordInfoVtbl;

typedef struct IRecordInfo
{
    IRecordInfoVtbl *lpVtbl;
};

typedef struct tagVARIANT
{
    union 
    {
        struct __tagVARIANT
        {
            #pragma next_field_define_values_file("VARTYPE_Defines.txt")
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union 
            {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                _VARIANT_BOOL bool;
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                _VARIANT_BOOL *pbool;
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct __tagBRECORD
                {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                }__VARIANT_NAME_4;
            }__VARIANT_NAME_3;
        }__VARIANT_NAME_2;
    DECIMAL decVal;
    }__VARIANT_NAME_1;
} VARIANT,VARIANTARG,*LPVARIANT,*LPVARIANTARG;

typedef struct tagDISPPARAMS
{
    VARIANTARG *rgvarg;
    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
}DISPPARAMS,*PDISPPARAMS,*PPDISPPARAMS;

typedef struct tagEXCEPINFO {
    WORD  wCode;
    WORD  wReserved;
    BSTR  bstrSource;
    BSTR  bstrDescription;
    BSTR  bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    // HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    PVOID pfnDeferredFillIn;
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;